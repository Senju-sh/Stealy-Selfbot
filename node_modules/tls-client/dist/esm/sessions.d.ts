import { SessionConstructorOptions, ExecuteRequestOptions, Headers, Params } from './types';
import { Response } from './response';
import { CookieJar } from 'tough-cookie';
declare class Session {
    private sessionId;
    headers: Headers;
    proxy: string;
    params: Params;
    cookies: CookieJar;
    private sessionOptions;
    private clientIdentifier;
    private ja3string;
    private h2Settings;
    private h2SettingsOrder;
    private supportedSignatureAlgorithms;
    private supportedVersions;
    private keyShareCurves;
    private certCompressionAlgo;
    private pseudoHeaderOrder;
    private connectionFlow;
    private priorityFrames;
    private headerOrder;
    private headerPriority;
    private randomTlsExtensionOrder;
    private forceHttp1;
    constructor(options?: SessionConstructorOptions);
    executeRequest(method: string, url: string, options?: ExecuteRequestOptions): Promise<Response>;
    get(url: string, options?: ExecuteRequestOptions): Promise<Response>;
    post(url: string, options?: ExecuteRequestOptions): Promise<Response>;
    put(url: string, options?: ExecuteRequestOptions): Promise<Response>;
    delete(url: string, options?: ExecuteRequestOptions): Promise<Response>;
    head(url: string, options?: ExecuteRequestOptions): Promise<Response>;
    patch(url: string, options?: ExecuteRequestOptions): Promise<Response>;
    options(url: string, options?: ExecuteRequestOptions): Promise<Response>;
}
export { Session };
//# sourceMappingURL=sessions.d.ts.map